{"version":3,"sources":["components/MovieRow.js","components/movieErr.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","className","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","MovieErr","App","state","performSearch","searchTerm","urlString","$","ajax","success","searchResults","results","movieRows","length","console","log","movieErr","setState","forEach","poster_path","movieRow","class","push","error","xhr","status","err","event","target","style","fontSize","fontWeight","display","paddingTop","paddingBottom","paddingLeft","margin","marginTop","outline","onChange","serachChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPA+CeA,G,0LA1CP,IAAMC,EAAM,oCAAoCC,KAAKC,MAAMC,MAAMC,GAEjEC,OAAOC,SAASC,KAAKP,I,+BAKzB,OAAO,yBAAKQ,UAAU,YAAYC,IAAKR,KAAKC,MAAMC,MAAMC,IACxD,yBAAKI,UAAU,WACf,yBAAKE,IAAI,eAAeC,MAAM,MAAMC,IAAKX,KAAKC,MAAMC,MAAMU,cAE1D,yBAAKL,UAAU,qBACf,yBAAKA,UAAU,eACf,4BAAKP,KAAKC,MAAMC,MAAMW,QAEtB,yBAAKN,UAAU,kBACf,2BAAIP,KAAKC,MAAMC,MAAMY,WAErB,yBAAKP,UAAU,cACf,2BAAOQ,KAAK,SAASR,UAAU,UAAUS,QAAShB,KAAKiB,UAAUC,KAAKlB,MAAOmB,MAAM,gB,GAtBhEC,IAAMC,YCMdC,E,iLAHX,OAAO,6BAAK,0C,GAHOF,IAAMC,W,gBC6HdE,G,kBAtHf,WAAatB,GAAQ,IAAD,8BAClB,4CAAMA,KACDuB,MAAM,GAiBb,EAAKC,cAAc,YAnBC,E,2EAsBNC,GAAY,IAAD,OACjBC,EAAY,4FAA8FD,EAChHE,IAAEC,KAAK,CACL9B,IAAK4B,EACLG,QAAS,SAACC,GAER,IAAMC,EAAUD,EAAcC,QAC1BC,EAAY,GAChB,GAAGF,EAAcC,QAAQE,OAAO,EAAE,CAChCC,QAAQC,IAAI,SACZ,IAAMC,EAAW,kBAAC,EAAD,MACjB,EAAKC,SAAS,CAACL,UAAWI,SAG5BL,EAAQO,SAAQ,SAACrC,GACfA,EAAMU,WAAa,kCAAoCV,EAAMsC,YAC/D,IAAMC,EAAW,kBAAC,EAAD,CAAUjC,IAAKN,EAAMC,GAAID,MAAOA,GAAQ,yBAAKwC,MAAM,YAClET,EAAUU,KAAKF,MAEjB,EAAKH,SAAS,CAACL,UAAWA,KAE5BW,MAAO,SAACC,EAAIC,EAAQC,S,0CAKJC,GAClBb,QAAQC,IAAIY,EAAMC,OAAO9B,OACzB,IAAMO,EAAasB,EAAMC,OAAO9B,MAChCnB,KAAKyB,cAAcC,K,+BAInB,OACE,yBAAKnB,UAAU,eACf,yBAAKA,UAAU,YACf,0BAAMA,UAAU,YAChB,yBAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,gBAEnC,0BAAMJ,UAAU,aAChB,iDAkBE,yBAAKA,UAAU,aACjB,2BAAO2C,MAAO,CACZC,SAAU,GACVC,WAAY,OACZC,QAAS,QACT3C,MAAM,MACN4C,WAAY,EACZC,cAAe,EACfC,YAAa,GACbC,OAAQ,OACRC,UAAU,EACVC,QAAS,GACRC,SAAU5D,KAAK6D,oBAAoB3C,KAAKlB,MAAO8D,YAAY,sBAE7D9D,KAAKwB,MAAMS,WAEZ,yBAAKS,MAAM,WACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,UACT,yBAAKhC,MAAM,MAAMC,IAAI,4PAA4PF,IAAI,YACrR,uBAAGiC,MAAM,UAAT,mCAGA,uBAAGA,MAAM,WAAT,iDAEE,mCAFF,qBAE+B,uBAAGpC,KAAK,gCAAgC2C,OAAO,UAA/C,WAE/B,yBAAKP,MAAM,QAAX,oC,GA7GQrB,cCKE0C,QACW,cAA7B3D,OAAOC,SAAS2D,UAEe,UAA7B5D,OAAOC,SAAS2D,UAEhB5D,OAAOC,SAAS2D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.acc53237.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MovieRow extends React.Component{\r\n\r\n    viewMovie(){\r\n        const url = \"https://www.themoviedb.org/movie/\"+this.props.movie.id;\r\n\r\n        window.location.href=url;\r\n    }\r\n\r\nrender(){\r\n    \r\n    return <div className=\"movieRows\" key={this.props.movie.id}>\r\n    <div className=\"app-img\">\r\n    <img alt=\"movie-poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n    </div>\r\n    <div className=\"movie-description\">\r\n    <div className=\"movie-title\">\r\n    <h3>{this.props.movie.title}</h3>\r\n    </div> \r\n    <div className=\"movie-overview\">\r\n    <p>{this.props.movie.overview}</p>\r\n    </div> \r\n    <div className=\"movie-view\">\r\n    <input type=\"button\" className=\"viewbtn\" onClick={this.viewMovie.bind(this)} value=\"view\" />\r\n    </div> \r\n    </div>\r\n    </div>\r\n    \r\n//     <table key={this.props.movie.id}>\r\n//     <tbody>\r\n//       <tr>\r\n//         <td>\r\n//           <img alt=\"movie-poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n//         </td>\r\n//         <td>\r\n//           <h3>{this.props.movie.title}</h3>\r\n//           <p>{this.props.movie.overview}</p>\r\n//           <input type=\"button\" className=\"viewbtn\" onClick={this.viewMovie.bind(this)} value=\"view\" />\r\n//         </td>\r\n//         </tr>\r\n//     </tbody>\r\n\r\n//   </table>\r\n}\r\n}\r\n\r\nexport default MovieRow;","import React from 'react';\r\n\r\nclass MovieErr extends React.Component{\r\n\r\nrender(){\r\n    return <div><h1>Error</h1></div>\r\n}\r\n}\r\nexport default MovieErr;","import React, {Component} from 'react';\r\nimport './css/App.css';\r\nimport MovieRow from './components/MovieRow.js';\r\nimport MovieErr from './components/movieErr.js';\r\nimport $ from 'jquery';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends Component{\r\n\r\nconstructor (props) {\r\n  super(props)\r\n  this.state={};\r\n  \r\n  //this.state = {rows: <p>hi</p>} //single\r\n\r\n    // const movies =[\r\n    //   {id:0, poster_src:\"cinema.svg\", title: \"Avengers the Begining\", overview:\"Marvel's The Avengers or simply The Avengers, is a 2012 American superhero film based on the Marvel Comics superhero team of the same name\" },\r\n    //   {id:1, poster_src:\"cinema.svg\", title: \"Avengers the End Game\", overview:\"Avengers: Endgame is a 2019 American superhero film based on the Marvel Comics superhero team the Avengers, \"},\r\n    // ]\r\n\r\n    // var movieRows = [];\r\n    // movies.forEach((movie) =>{\r\n    //   const movieRow = <MovieRow passmovie={movie} />\r\n    //   movieRows.push(movieRow);\r\n    // });\r\n\r\n    // this.state = {movieRows: movieRows}\r\n\r\nthis.performSearch(\"avengers\")\r\n} \r\n\r\nperformSearch(searchTerm){\r\n  const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=0923e7ab9e9ecdc6bfa29590587c12d7&query=\" + searchTerm;\r\n  $.ajax({\r\n    url: urlString,  \r\n    success: (searchResults) =>{\r\n      //console.log(\"fetched data\");\r\n      const results = searchResults.results;\r\n      var movieRows = [];\r\n      if(searchResults.results.length<1){\r\n        console.log(\"error\");\r\n        const movieErr = <MovieErr></MovieErr>\r\n        this.setState({movieRows: movieErr})\r\n      }\r\n      else\r\n      results.forEach((movie) =>{\r\n        movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\r\n      const movieRow = <MovieRow key={movie.id} movie={movie}>{<div class=\"Parent\"></div>}</MovieRow>\r\n        movieRows.push(movieRow);\r\n      })\r\n      this.setState({movieRows: movieRows})\r\n    },\r\n    error: (xhr,status, err) =>{\r\n    }\r\n  })\r\n}\r\n\r\nserachChangeHandler(event){\r\n  console.log(event.target.value);\r\n  const searchTerm = event.target.value;\r\n  this.performSearch(searchTerm);\r\n}\r\n\r\nrender(){\r\n  return (  \r\n    <div className=\"App bodyDiv\">\r\n    <div className=\"titleBar\">\r\n    <span className=\"app-icon\">\r\n    <img alt=\"app-icon\" width=\"50\" src=\"cinema.svg\"/>\r\n    </span>\r\n    <span className=\"app-title\">\r\n    <h1>Movie-DB Search</h1>\r\n    </span>\r\n    </div>\r\n    \r\n\r\n      {/* <table className=\"titleBar\">\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img alt=\"app-icon\" width=\"50\" src=\"cinema.svg\"/>\r\n            </td>\r\n            <td width=\"8\"></td>\r\n            <td>\r\n              <h1>MoviesDB Search</h1>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table> */}\r\n      <div className=\"container\">\r\n    <input style={{\r\n      fontSize: 20,\r\n      fontWeight: \"bold\",\r\n      display: \"block\",\r\n      width:\"50%\",\r\n      paddingTop: 8,\r\n      paddingBottom: 8,\r\n      paddingLeft: 11,\r\n      margin: \"auto\",\r\n      marginTop:5,\r\n      outline: 0,\r\n    }} onChange={this.serachChangeHandler.bind(this)} placeholder=\"Search Your Movie\"/>\r\n\r\n    {this.state.movieRows}\r\n    </div>\r\n    <div class=\"contact\">\r\n      <div class=\"container\">\r\n        <div class=\"footer\">\r\n          <img width=\"100\" src=\"https://scontent-ort2-1.xx.fbcdn.net/v/t1.0-9/79148294_2203364699763580_1501455854409351168_n.jpg?_nc_cat=105&_nc_ohc=TQl4eqTHNWUAQlcUdh8klM4LamKnnzfay8xh2VobfoB9D3a5hxmUddVTw&_nc_ht=scontent-ort2-1.xx&oh=68289771fe4bf26c391f2d4fdf97fd7f&oe=5E6E69DF\" alt=\"Profile\"/>\r\n          <p class=\"credit\">\r\n            Designed and developed by Ashok\r\n          </p>\r\n          <p class=\"license\">\r\n            Hosted in Github Pages. Code is licensed under\r\n            <b> MIT</b> and available at <a href=\"https://github.com/AshokWeber\" target=\"_blank\">Github</a>\r\n          </p>\r\n          <div class=\"copy\">\r\n            &copy; 2019 Ashok Gurusamy\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}