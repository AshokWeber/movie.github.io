{"version":3,"sources":["components/MovieRow.js","components/movieErr.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","className","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","MovieErr","App","state","performSearch","searchTerm","urlString","$","ajax","success","searchResults","results","movieRows","length","console","log","movieErr","setState","forEach","poster_path","movieRow","class","push","error","xhr","status","err","event","target","style","fontSize","fontWeight","display","paddingTop","paddingBottom","paddingLeft","margin","marginTop","outline","onChange","serachChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPA+CeA,G,0LA1CP,IAAMC,EAAM,oCAAoCC,KAAKC,MAAMC,MAAMC,GAEjEC,OAAOC,SAASC,KAAKP,I,+BAKzB,OAAO,yBAAKQ,UAAU,YAAYC,IAAKR,KAAKC,MAAMC,MAAMC,IACxD,yBAAKI,UAAU,WACf,yBAAKE,IAAI,eAAeC,MAAM,MAAMC,IAAKX,KAAKC,MAAMC,MAAMU,cAE1D,yBAAKL,UAAU,qBACf,yBAAKA,UAAU,eACf,4BAAKP,KAAKC,MAAMC,MAAMW,QAEtB,yBAAKN,UAAU,kBACf,2BAAIP,KAAKC,MAAMC,MAAMY,WAErB,yBAAKP,UAAU,cACf,2BAAOQ,KAAK,SAASR,UAAU,UAAUS,QAAShB,KAAKiB,UAAUC,KAAKlB,MAAOmB,MAAM,gB,GAtBhEC,IAAMC,YCMdC,E,iLAHX,OAAO,6BAAK,0C,GAHOF,IAAMC,W,gBC6HdE,G,kBAtHf,WAAatB,GAAQ,IAAD,8BAClB,4CAAMA,KACDuB,MAAM,GAiBb,EAAKC,cAAc,YAnBC,E,2EAsBNC,GAAY,IAAD,OACjBC,EAAY,4FAA8FD,EAChHE,IAAEC,KAAK,CACL9B,IAAK4B,EACLG,QAAS,SAACC,GAER,IAAMC,EAAUD,EAAcC,QAC1BC,EAAY,GAChB,GAAGF,EAAcC,QAAQE,OAAO,EAAE,CAChCC,QAAQC,IAAI,SACZ,IAAMC,EAAW,kBAAC,EAAD,MACjB,EAAKC,SAAS,CAACL,UAAWI,SAG5BL,EAAQO,SAAQ,SAACrC,GACfA,EAAMU,WAAa,kCAAoCV,EAAMsC,YAC/D,IAAMC,EAAW,kBAAC,EAAD,CAAUjC,IAAKN,EAAMC,GAAID,MAAOA,GAAQ,yBAAKwC,MAAM,YAClET,EAAUU,KAAKF,MAEjB,EAAKH,SAAS,CAACL,UAAWA,KAE5BW,MAAO,SAACC,EAAIC,EAAQC,S,0CAKJC,GAClBb,QAAQC,IAAIY,EAAMC,OAAO9B,OACzB,IAAMO,EAAasB,EAAMC,OAAO9B,MAChCnB,KAAKyB,cAAcC,K,+BAInB,OACE,yBAAKnB,UAAU,eACf,yBAAKA,UAAU,YACf,0BAAMA,UAAU,YAChB,yBAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,gBAEnC,0BAAMJ,UAAU,aAChB,iDAkBE,yBAAKA,UAAU,aACjB,2BAAO2C,MAAO,CACZC,SAAU,GACVC,WAAY,OACZC,QAAS,QACT3C,MAAM,MACN4C,WAAY,EACZC,cAAe,EACfC,YAAa,GACbC,OAAQ,OACRC,UAAU,EACVC,QAAS,GACRC,SAAU5D,KAAK6D,oBAAoB3C,KAAKlB,MAAO8D,YAAY,sBAE7D9D,KAAKwB,MAAMS,WAEZ,yBAAKS,MAAM,WACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,UACT,yBAAKhC,MAAM,MAAMC,IAAI,4PAA4PF,IAAI,YACrR,uBAAGiC,MAAM,UAAT,mCAGA,uBAAGA,MAAM,WAAT,iDAEE,mCAFF,qBAE+B,uBAAGpC,KAAK,gCAAgC2C,OAAO,UAA/C,WAE/B,yBAAKP,MAAM,QAAX,oC,GA7GQrB,cCKE0C,QACW,cAA7B3D,OAAOC,SAAS2D,UAEe,UAA7B5D,OAAOC,SAAS2D,UAEhB5D,OAAOC,SAAS2D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2c56c73f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MovieRow extends React.Component{\r\n\r\n    viewMovie(){\r\n        const url = \"https://www.themoviedb.org/movie/\"+this.props.movie.id;\r\n\r\n        window.location.href=url;\r\n    }\r\n\r\nrender(){\r\n    \r\n    return <div className=\"movieRows\" key={this.props.movie.id}>\r\n    <div className=\"app-img\">\r\n    <img alt=\"movie-poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n    </div>\r\n    <div className=\"movie-description\">\r\n    <div className=\"movie-title\">\r\n    <h3>{this.props.movie.title}</h3>\r\n    </div> \r\n    <div className=\"movie-overview\">\r\n    <p>{this.props.movie.overview}</p>\r\n    </div> \r\n    <div className=\"movie-view\">\r\n    <input type=\"button\" className=\"viewbtn\" onClick={this.viewMovie.bind(this)} value=\"view\" />\r\n    </div> \r\n    </div>\r\n    </div>\r\n    \r\n//     <table key={this.props.movie.id}>\r\n//     <tbody>\r\n//       <tr>\r\n//         <td>\r\n//           <img alt=\"movie-poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n//         </td>\r\n//         <td>\r\n//           <h3>{this.props.movie.title}</h3>\r\n//           <p>{this.props.movie.overview}</p>\r\n//           <input type=\"button\" className=\"viewbtn\" onClick={this.viewMovie.bind(this)} value=\"view\" />\r\n//         </td>\r\n//         </tr>\r\n//     </tbody>\r\n\r\n//   </table>\r\n}\r\n}\r\n\r\nexport default MovieRow;","import React from 'react';\r\n\r\nclass MovieErr extends React.Component{\r\n\r\nrender(){\r\n    return <div><h1>Error</h1></div>\r\n}\r\n}\r\nexport default MovieErr;","import React, {Component} from 'react';\nimport './css/App.css';\nimport MovieRow from './components/MovieRow.js';\nimport MovieErr from './components/movieErr.js';\nimport $ from 'jquery';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component{\n\nconstructor (props) {\n  super(props)\n  this.state={};\n  \n  //this.state = {rows: <p>hi</p>} //single\n\n    // const movies =[\n    //   {id:0, poster_src:\"cinema.svg\", title: \"Avengers the Begining\", overview:\"Marvel's The Avengers or simply The Avengers, is a 2012 American superhero film based on the Marvel Comics superhero team of the same name\" },\n    //   {id:1, poster_src:\"cinema.svg\", title: \"Avengers the End Game\", overview:\"Avengers: Endgame is a 2019 American superhero film based on the Marvel Comics superhero team the Avengers, \"},\n    // ]\n\n    // var movieRows = [];\n    // movies.forEach((movie) =>{\n    //   const movieRow = <MovieRow passmovie={movie} />\n    //   movieRows.push(movieRow);\n    // });\n\n    // this.state = {movieRows: movieRows}\n\nthis.performSearch(\"avengers\")\n} \n\nperformSearch(searchTerm){\n  const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=0923e7ab9e9ecdc6bfa29590587c12d7&query=\" + searchTerm;\n  $.ajax({\n    url: urlString,  \n    success: (searchResults) =>{\n      //console.log(\"fetched data\");\n      const results = searchResults.results;\n      var movieRows = [];\n      if(searchResults.results.length<1){\n        console.log(\"error\");\n        const movieErr = <MovieErr></MovieErr>\n        this.setState({movieRows: movieErr})\n      }\n      else\n      results.forEach((movie) =>{\n        movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n      const movieRow = <MovieRow key={movie.id} movie={movie}>{<div class=\"Parent\"></div>}</MovieRow>\n        movieRows.push(movieRow);\n      })\n      this.setState({movieRows: movieRows})\n    },\n    error: (xhr,status, err) =>{\n    }\n  })\n}\n\nserachChangeHandler(event){\n  console.log(event.target.value);\n  const searchTerm = event.target.value;\n  this.performSearch(searchTerm);\n}\n\nrender(){\n  return (  \n    <div className=\"App bodyDiv\">\n    <div className=\"titleBar\">\n    <span className=\"app-icon\">\n    <img alt=\"app-icon\" width=\"50\" src=\"cinema.svg\"/>\n    </span>\n    <span className=\"app-title\">\n    <h1>Movie-DB Search</h1>\n    </span>\n    </div>\n    \n\n      {/* <table className=\"titleBar\">\n        <tbody>\n          <tr>\n            <td>\n              <img alt=\"app-icon\" width=\"50\" src=\"cinema.svg\"/>\n            </td>\n            <td width=\"8\"></td>\n            <td>\n              <h1>MoviesDB Search</h1>\n            </td>\n          </tr>\n        </tbody>\n      </table> */}\n      <div className=\"container\">\n    <input style={{\n      fontSize: 20,\n      fontWeight: \"bold\",\n      display: \"block\",\n      width:\"50%\",\n      paddingTop: 8,\n      paddingBottom: 8,\n      paddingLeft: 11,\n      margin: \"auto\",\n      marginTop:5,\n      outline: 0,\n    }} onChange={this.serachChangeHandler.bind(this)} placeholder=\"Search Your Movie\"/>\n\n    {this.state.movieRows}\n    </div>\n    <div class=\"contact\">\n      <div class=\"container\">\n        <div class=\"footer\">\n          <img width=\"100\" src=\"https://scontent-ort2-1.xx.fbcdn.net/v/t1.0-9/79148294_2203364699763580_1501455854409351168_n.jpg?_nc_cat=105&_nc_ohc=TQl4eqTHNWUAQlcUdh8klM4LamKnnzfay8xh2VobfoB9D3a5hxmUddVTw&_nc_ht=scontent-ort2-1.xx&oh=68289771fe4bf26c391f2d4fdf97fd7f&oe=5E6E69DF\" alt=\"Profile\"/>\n          <p class=\"credit\">\n            Designed and developed by Ashok\n          </p>\n          <p class=\"license\">\n            Hosted in Github Pages. Code is licensed under\n            <b> MIT</b> and available at <a href=\"https://github.com/AshokWeber\" target=\"_blank\">Github</a>\n          </p>\n          <div class=\"copy\">\n            &copy; 2019 Ashok Gurusamy\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}